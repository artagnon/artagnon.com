git: branch.<name>.pushremote

With the latest git, simply do `git config remote.pushdefault
<your-remote>` and `git config push.default current` to ensure that a
`git push` from all branches sends pushes to your fork. 
--

This has been annoying me for a really long time, but I never really
got around to scratching this particular itch. I have a very common
scenario where I fork a project on GitHub. I have two configured
remotes: origin which points to "git://upstream" and mine which points
to "ssh://mine". By default, I always want to pull master from origin
and push to mine. Unfortunately, there's only a branch.<name>.remote
which specifies which remote to use for both pulling and
pushing. There's also a remote.<name>.pushurl, but I get the feeling
that this exists for an entirely different reason: when I have a
server with a highly-available read-only mirror of the repository at
git://anongit.*, and a less-available committer-only mirror at
ssh://*.

There's a reason why remote.<name>.pushurl feels wrong. If one remote
has a different push from pull, there should be something
corresponding to refs/remotes/* for push (and the equivalent of fetch
for updating it). Second, I can't even diff between a branch on my
push URL and a local branch: the [ahead 1, behind 1] in status output
really doesn't make sense if the repository you're pushing to is
different from the one you're pulling from. In contrast, if you take
what I proposed, refs/remotes/{upstream, mine}/* already exist, and
it's easy to diff them with the corresponding local branch.

How about a branch.<name>.pushremote that specifies a special remote
for pushing, falling back to branch.<name>.remote?
