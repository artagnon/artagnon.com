Why dependently type?



--

We'll take the high-road and explain type-hierarchy in the post-HoTT world, where there is simply one $\infty$-ladder of types.

--

Definition: a typing discipline built upon $\Sigma$-types and $\Pi$-types as primitives. $\Sigma$ types can be used to build dependent pairs: $(x, E)$, where $E$ is some kind of type that depends

--

In Coq,

Given: {A, B : Type}, {x, y : A} {P, Q : Prop}, {f, g : A -> B}, {P f g}, {Q x y}.
To find: Relationship between f(x) and g(y), or R in R {f(x) g(y)}.

Simple case: P, Q = refl -> R = refl.

Types are topological spaces. Inhabitants are points, with AUFI, which are also topological spaces.
A function is a homotopy between topological spaces.
A homotopy between spaces maps points in one space to points in another space.
Consider two functions (or homotopies) f and g. To say that they're homotopy equivalent means that they have the same start and end spaces: f ~ g.
Homotopy equivalence is a proof, which is also a homotopy between inhabitants.
Consider a proof that two inhabitants are equal. This is also a homotopy.
