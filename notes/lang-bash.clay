An opinionated history of programming languages

{{
  \color{red}{\texttt{Fortran (1957)}} & \textbf{Lisp (1958)}\ar[ddl]\ar[ddr] \\
  \textbf{Smalltalk (1972)}\ar[drr]\ar[dddrr]\ar@/^/[dddrrrr] & \textbf{C (1972)}\ar[d]\ar[drr]\ar[dddl]\ar@/^1pc/[dddddrr] & \textbf{ML (1973)}\ar[dddl]\ar@/^1pc/[dddrrr] & \textbf{sh (1978)}\ar[d] \\
  \texttt{Common Lisp (1984)} & \texttt{C++ (1985)}\ar[ddrr]\ar[ddddddl] & \texttt{Erlang (1986)}\ar[ddddl] & \texttt{Perl (1987)}\ar[ddlll]\ar[ddl] & \textbf{Coq (1989)}\ar@/_1pc/[ddddllll]\ar@/^1pc/[ddddll] \\
  \\
  \texttt{Python (1990)}\ar[ddddr] & \texttt{Haskell (1990)}\ar[ddl] & \texttt{Ruby (1995)}\ar[ddddl]\ar[ddl] & \texttt{Java (1995)}\ar[ddll] & \texttt{Javascript (1995)} & \texttt{OCaml (1996)} \\
  \\
  \texttt{Agda (2007)}\ar@/_2pc/[rr] & \texttt{Clojure (2007)} & \texttt{Idris (2007)} & \texttt{Go (2009)} \\
  \\
  \texttt{Rust (2010)} & \texttt{Julia (2012)}
}}

are all based on distinctly different strong foundational ideas. All programming languages today can be thought of as a rehash of these ideas, with some embellishments.

The C lineage spawned C++, Go, and Rust. With its template system, C++ is easily the most powerful langauge from the C lineage, and gcc/clang have been optimized to death. Go is probably one of the worst languages every invented, with its poverty of features, and misleading simplicity in concurrency leading to runtime races.

The Lisp lineage spawned Common Lisp, Clojure, and the Scheme lineage. With its reader-macros, you can design practically any language in Common Lisp, and leverage the power of the SBCL parser to do everything. Unfortunately, it's fallen out of fashion due to the complexity of the Common Lisp spec, and SBCL hasn't aged well. The more modern ones are dumb-downs of Common Lisp, and are just toys.

Fortran is strong within the high-performance computing community, because gfortran
